import fs from 'fs'; import path from 'path'; import MarkdownIt from 'markdown-it'; import puppeteer from 'puppeteer';
const md = new MarkdownIt({ html: false, linkify: true, typographer: true });
export async function mdToPdf(mdPath: string, outDir = 'data/media') {
  const src = fs.readFileSync(mdPath, 'utf-8');
  const html = `<html><head><meta charset="utf-8"/><style>body{font-family: system-ui;-apple-system, Segoe UI, Roboto, Helvetica, Arial; padding:32px; line-height:1.55;}h1,h2,h3{margin:16px 0 8px;}code,pre{font-family: ui-monospace, Menlo, Consolas, monospace; background:#f6f8fa}pre{padding:12px; border-radius:8px; overflow:auto}img{max-width:100%}.meta{color:#666; font-size:12px; margin-bottom:24px}</style></head><body><div class="meta">Generated by Ghost System</div>${md.render(src)}</body></html>`;
  fs.mkdirSync(outDir, { recursive: true });
  const pdfPath = path.join(outDir, path.basename(mdPath).replace(/\.md$/, '.pdf'));
  const browser = await puppeteer.launch({ args: ['--no-sandbox'] });
  try { const page = await browser.newPage(); await page.setContent(html, { waitUntil: 'networkidle0' }); await page.pdf({ path: pdfPath, format: 'A4', printBackground: true, margin: { top: '16mm', bottom: '16mm', left: '14mm', right: '14mm' } }); }
  finally { await browser.close(); }
  return pdfPath;
}
